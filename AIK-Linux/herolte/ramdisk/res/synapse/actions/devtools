BB=busybox;

# SQLite log location
LOGS=/sdcard/apollo/Logs/SQLite.txt;

if [ "$($BB mount | grep rootfs | cut -c 26-27 | grep -c ro)" -eq "1" ]; then
	$BB mount -o remount,rw /;
fi;
if [ "$($BB mount | grep system | grep -c ro)" -eq "1" ]; then
	$BB mount -o remount,rw /system;
fi;

case $1 in
  reboot)
	if [[ "$(cat /sys/kernel/dyn_fsync/Dyn_fsync_active)" != "0" ]]; then
		echo "0" > /sys/kernel/dyn_fsync/Dyn_fsync_active;
	fi;
	$BB sync;
	$BB sleep 1;
	reboot "$2";
  ;;
  hot_reboot)
	if [[ "$(cat /sys/kernel/dyn_fsync/Dyn_fsync_active)" != "0" ]]; then
		echo "0" > /sys/kernel/dyn_fsync/Dyn_fsync_active;
	fi;
	$BB sync;
	$BB sleep 1;
	pkill zygote
  ;;
  cleardata)
	if [[ "$(cat /sys/kernel/dyn_fsync/Dyn_fsync_active)" != "0" ]]; then
		echo "0" > /sys/kernel/dyn_fsync/Dyn_fsync_active;
	fi;
	am force-stop com.af.synapse 2> /dev/null;
	$BB rm -R /data/data/com.af.synapse/*;
	$BB rm -f /data/dalvik-cache/arm64/data@app@com.af.synapse*;
	$BB rm -f /data/dalvik-cache/profiles/com.af.synapse;
	$BB sync;
	$BB sleep 1;
	/system/bin/reboot;
  ;;
  restart)
    	am force-stop com.af.synapse 2> /dev/null;
    	reset_uci;
	$BB sync;
    	$BB sleep 1;
    	am start -a android.intent.action.MAIN -n com.af.synapse/.MainActivity 2> /dev/null;
  ;;
  fix_wifi)
	svc wifi disable 2> /dev/null;
	rm -f /data/misc/dhcp/dhcpcd*;
	svc wifi enable 2> /dev/null;
	echo "WIFI Release Renew is DONE";
  ;;
  selinux)	
	if [[ ! -z $2 ]]; then
		if [ "$2" == Enforcing ]; then
			if [ "$(getenforce)" != Enforcing ]; then
				setenforce 1;
			else
				exit 0;
			fi;
		elif [ "$2" == Permissive ]; then
			if [ "$(getenforce)" != Permissive ]; then
				setenforce 0;
			else
				exit 0;
			fi;
		fi;
	fi;

	$BB echo "$(getenforce)";
  ;;
  optimizedb)
	# SQLite log location
	LOGS=/data/media/0/apollo/Logs/SQLite.txt;

	if [ -e $LOGS ]; then
		rm $LOGS;
	fi;

	# Create Log folder on sdcard
	LOG=/sdcard/apollo/Logs;

	[ ! -d "$LOG" ] && mkdir -p "$LOG";
	$BB chmod -R 755 $LOG;

	echo "SQLite database VACUUM and REINDEX started at $( date +"%m-%d-%Y %H:%M:%S" )" | tee -a $LOGS;

	for i in $($BB find /data -iname "*.db"); do
		/system/xbin/sqlite3 "$i" 'VACUUM;' 2> /dev/null;
			resVac=$?
			if [ $resVac == 0 ]; then
				resVac="SUCCESS";
			else
				resVac="ERRCODE-$resVac";
			fi;
		/system/xbin/sqlite3 "$i" 'REINDEX;' 2> /dev/null;
			resIndex=$?
			if [ $resIndex == 0 ]; then
				resIndex="SUCCESS";
			else
				resIndex="ERRCODE-$resIndex";
			fi;
		echo "Database $i:  VACUUM=$resVac  REINDEX=$resIndex" | tee -a $LOGS;
	done;

	for i in $($BB find /data -iname "*.db"); do
		/system/xbin/sqlite3 "$i" 'VACUUM;' 2> /dev/null;
			resVac=$?
			if [ $resVac == 0 ]; then
				resVac="SUCCESS";
			else
				resVac="ERRCODE-$resVac";
			fi;
		/system/xbin/sqlite3 "$i" 'REINDEX;' 2> /dev/null;
			resIndex=$?
			if [ $resIndex == 0 ]; then
				resIndex="SUCCESS";
			else
				resIndex="ERRCODE-$resIndex";
			fi;
		echo "Database $i:  VACUUM=$resVac  REINDEX=$resIndex" | tee -a $LOGS;
	done;
		echo "SQLite database VACUUM and REINDEX finished at $( date +"%m-%d-%Y %H:%M:%S" )" | tee -a $LOGS;

	$BB echo "Databases have been optimized";
  ;;
  fstrim)
	if grep -q 'system ext4' /proc/mounts ; then
		echo -e "Trim "
		/system/xbin/fstrim -v /system
		echo -e ""
	else
		echo " --System is F2FS-- ";
	fi;
	if grep -q 'data ext4' /proc/mounts ; then
		echo -e "Trim "
		/system/xbin/fstrim -v /data
		echo -e ""
	else
		echo " --Data is F2FS-- ";
	fi;
	if grep -q 'cache ext4' /proc/mounts ; then
		echo -e "Trim "
		/system/xbin/fstrim -v /cache
		echo -e ""
	else
		echo " --Cache is F2FS-- ";
	fi;
	$BB sync
  ;;
  wipe_cache_reboot)
	if [[ "$(cat /sys/kernel/dyn_fsync/Dyn_fsync_active)" != "0" ]]; then
		echo "0" > /sys/kernel/dyn_fsync/Dyn_fsync_active;
	fi;
	$BB rm -rf /cache/*
	$BB sync;
	$BB sleep 1;
	/system/bin/reboot;
  ;;
  wipe_dalvik_reboot)
	if [[ "$(cat /sys/kernel/dyn_fsync/Dyn_fsync_active)" != "0" ]]; then
		echo "0" > /sys/kernel/dyn_fsync/Dyn_fsync_active;
	fi;
	$BB rm -rf /data/dalvik-cache/*
	$BB sync;
	$BB sleep 1;
	/system/bin/reboot;
  ;;
  wipe_cache-dalvik_reboot)
	if [[ "$(cat /sys/kernel/dyn_fsync/Dyn_fsync_active)" != "0" ]]; then
		echo "0" > /sys/kernel/dyn_fsync/Dyn_fsync_active;
	fi;
	$BB rm -rf /cache/*
	$BB rm -rf /data/dalvik-cache/*
	$BB sync;
	$BB sleep 1;
	/system/bin/reboot;
  ;;
  clean_up)
	$BB rm -rf /cache/lost+found/*
	$BB rm -rf /data/anr/*
	$BB rm -rf /data/clipboard/*
	$BB rm -rf /data/lost+found/*
	$BB rm -rf /data/system/dropbox/*
	$BB rm -rf /data/tombstones/*
	$BB sync;
	$BB sleep 1;
	echo "Clean up done";
  ;;
  clean_initd)
	$BB rm -rf /system/etc/init.d/*
	$BB sync;
	$BB sleep 1;
	echo "init.d folder cleaned";
  ;;
scr_cache)
  P=/res/synapse/prom/scr_cache
  if [ ! -z "$2" ]; then
  if [ "$2" == 0 ]; then
    echo 0 > $P
	setprop persist.sys.scrollingcache 0
  elif [ "$2" == 1 ]; then
    echo 1 > $P
	setprop persist.sys.scrollingcache 1
  elif [ "$2" == 2 ]; then
    echo 2 > $P
	setprop persist.sys.scrollingcache 2
  elif [ "$2" == 3 ]; then
    echo 3 > $P
	setprop persist.sys.scrollingcache 3
  fi; fi
  copy=$(cat $P)
  if [ "$copy" == 0 ]; then
    echo 0
  elif [ "$copy" == 1 ]; then
    echo 1
  elif [ "$copy" == 2 ]; then
    echo 2
  elif [ "$copy" == 3 ]; then
    echo 3
  fi
  ;;
spcm_service)
  P=/res/synapse/prom/spcm_service
  if [ ! -z "$2" ]; then
  if [ "$2" == Enabled ]; then
    echo Enabled > $P
	setprop sys.config.spcm_enable true
  elif [ "$2" == Disabled ]; then
    echo Disabled > $P
	setprop sys.config.spcm_enable false
  fi; fi
  copy=$(cat $P)
  if [ "$copy" == Enabled ]; then
    echo Enabled
  elif [ "$copy" == Disabled ]; then
    echo Disabled
  fi
  ;;
SystemUpdateService)
  P=/res/synapse/prom/SystemUpdateService
  if [ ! -z "$2" ]; then
  if [ "$2" == Enabled ]; then
    echo Enabled > $P
	pm enable com.google.android.gms/.update.SystemUpdateActivity
	pm enable com.google.android.gms/.update.SystemUpdateService
	pm enable com.google.android.gms/.update.SystemUpdateService$ActiveReceiver
	pm enable com.google.android.gms/.update.SystemUpdateService$Receiver
	pm enable com.google.android.gms/.update.SystemUpdateService$SecretCodeReceiver
	pm enable com.google.android.gsf/.update.SystemUpdateActivity
	pm enable com.google.android.gsf/.update.SystemUpdatePanoActivity
	pm enable com.google.android.gsf/.update.SystemUpdateService
	pm enable com.google.android.gsf/.update.SystemUpdateService$Receiver
	pm enable com.google.android.gsf/.update.SystemUpdateService$SecretCodeReceiver
  elif [ "$2" == Disabled ]; then
    echo Disabled > $P
	# Nothing to do here
  fi; fi
  copy=$(cat $P)
  if [ "$copy" == Enabled ]; then
    echo Enabled
  elif [ "$copy" == Disabled ]; then
    echo Disabled
  fi
  ;;
  efs_backup)
	if [ ! -d /data/media/0/apollo/Synapse/EFS ]; then
		$BB mkdir -p /data/media/0/apollo/Synapse/EFS
	fi;
	if [ -e /data/media/0/apollo/Synapse/EFS/efs_backup.img ]; then
		$BB rm -rf /data/media/0/apollo/Synapse/EFS/efs_backup.img;
		$BB dd if=dev/block/platform/155a0000.ufs/by-name/EFS of=/data/media/0/apollo/Synapse/EFS/efs_backup.img 2> /dev/null;
		$BB echo "efs_backup.img saved to /data/media/0/apollo/Synapse/EFS folder";
	else
		$BB dd if=dev/block/platform/155a0000.ufs/by-name/EFS of=/data/media/0/apollo/Synapse/EFS/efs_backup.img 2> /dev/null;
		$BB echo "efs_backup.img saved to /data/media/0/apollo/Synapse/EFS folder";
	fi;
  ;;
  efs_restore)
	if [ -e /data/media/0/apollo/Synapse/EFS/efs_backup.img ]; then
		$BB dd if=/data/media/0/apollo/Synapse/EFS/efs_backup.img of=/dev/block/platform/155a0000.ufs/by-name/EFS 2> /dev/null;
		$BB echo "efs_backup.img restored. Please REBOOT !";
	else
		$BB echo "efs_backup.img not found !";
	fi;
  ;;
esac;