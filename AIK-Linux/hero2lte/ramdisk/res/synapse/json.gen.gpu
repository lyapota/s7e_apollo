#!/system/bin/sh

cat << CTAG
{
    name:GPU,
    elements:[
	{ SPane:{
		title:"GPU state"
	}},
	{ SLiveLabel:{
		title:"GPU live frequency",
		refresh:500,
		action:"live gpu"
	}},
	{ SLiveLabel:{
		title:"Live Frequency Utilization",
		refresh:500,
		action:"live gpu_load"
	}},
	{ SLiveLabel:{
		title:"Time in States",
		refresh:2500,
		action:"live LiveGPUTime 0 12"
	}},
	{ SSpacer:{
		height:1
	}},
	{ SPane:{
		title:"GPU power policy control",
		description:"COARSE DEMAND power policy is to control only external power (PMU for G3D). It is better at saving power and performance. COARSE DEMAND turns off GPU power in case of being no job for 100ms and turns it on in case of incomming first job on the state of GPU off. Default is coarse_demand."
	}},
	{ SSpacer:{
		height:1
	}},
	{ SDescription:{
		description:"DEMAND power policy controls internal core power when processing a job, so it can be controlled frequently rendering one frame. This frequent control affect job utilization. So power consumption on DVFS with demand power policy is higher than coarse_demand."
	}},
	{ SSpacer:{
		height:1
	}},
	{ SOptionList:{
		title:"Mali power policy control",
		description:" ",
		default:$(echo "$(/res/synapse/actions/bracket-option /sys/devices/14ac0000.mali/power_policy)"),
		action:"bracket-option /sys/devices/14ac0000.mali/power_policy",
		values:[
`
			for POLICY in \`cat /sys/devices/14ac0000.mali/power_policy | sed -e 's/\]//;s/\[//'\`; do
				echo "\"$POLICY\","
			done
`
		]
	}},
	{ SSpacer:{
		height:1
	}},
	{ SPane:{
		title:"GPU thermal control",
		description:"Cooling device policy. Disable only if you know what you are doing."
	}},
	{ SOptionList:{
		title:"On/Off GPU Thermal Manager",
		description:" Your own risk to disable...\n",
       	 	default:`cat /sys/devices/14ac0000.mali/tmu`,
		action:"generic /sys/devices/14ac0000.mali/tmu",
		values:{ 0:"Disabled", 1:"Enabled"
		}
	}},
	{ SSpacer:{
		height:1
	}},
	{ SPane:{
		title:"GPU scaling settings",
		description:"By editing the following configurables you can change the performance behaviour of the GPU. WARNING: Not all frequencies outside defaults may be stable for your device!"
	}},
	{ SSpacer:{
		height:1
	}},
	{ SSeekBar:{
		title:"GPU MAX freq",
		description:"Set the maximum frequency the GPU scales up to. Default is 650MHz.\n",
		unit:" MHz",
		default:$(cat /sys/devices/14ac0000.mali/max_clock),
		action:"generic /sys/devices/14ac0000.mali/max_clock",
		values:{
`
			while read -r FREQ VOLT; do
				LABEL=$(($FREQ))
				echo "$FREQ:\"${LABEL} MHz\", "
			done < /sys/devices/14ac0000.mali/volt_table
`
		}
	}},
	{ SSpacer:{
		height:1
	}},
	{ SSeekBar:{
		title:"GPU MIN freq",
		description:"Set the minimum frequency the GPU scales up to. Default is 260MHz.\n",
		unit:" MHz",
		default:$(cat /sys/devices/14ac0000.mali/min_clock),
		action:"generic /sys/devices/14ac0000.mali/min_clock",
		values:{
`
			while read -r FREQ VOLT; do
				LABEL=$(($FREQ))
				echo "$FREQ:\"${LABEL} MHz\", "
			done < /sys/devices/14ac0000.mali/volt_table
`
		}
	}},
	{ SSpacer:{
		height:1
	}},
	{ SPane:{
		title:"GPU Governor",
		description:"Booster may give improved graphic & benchmark performance at the expense of battery."
	}},
	{ SSpacer:{
		height:1
	}},
	{ SOptionList:{
		title:"GPU Governor",
		description:" ",
		default:$(echo "$(/res/synapse/actions/gpu_governor gpu_gov)"),
		action:"gpu_governor gpu_gov",
		values:[Default, Interactive, Static, Booster]
	}},
	{ SPane:{
		title:"GPU Interactive governor tunables"
	}},
	{ SSpacer:{
		height:1
	}},
	{ SSeekBar:{
		title:"GPU highspeed clock",
		description:"Boost the minimum frequency the GPU scales up to.\n",
		default:$(cat /sys/devices/14ac0000.mali/highspeed_clock),
		unit:" MHz",
		action:"generic /sys/devices/14ac0000.mali/highspeed_clock",
		values:{
`
			while read -r FREQ VOLT; do
				LABEL=$(($FREQ))
				echo "$FREQ:\"${LABEL} MHz\", "
			done < /sys/devices/14ac0000.mali/volt_table
`
                }
	}},
	{ SSpacer:{
		height:1
	}},
	{ SSeekBar:{
		title:"GPU highspeed load",
		description:"Jump the minimum frequency level to highspeed_clock when the GPU utilization over this value.\n",
		default:$(cat /sys/devices/14ac0000.mali/highspeed_load),
		max:100, min:1, unit:" %", step:1,
		action:"generic /sys/devices/14ac0000.mali/highspeed_load",
	}},
	{ SSpacer:{
		height:1
	}},
	{ SSeekBar:{
		title:"GPU highspeed delay",
		description:"Jump the minimum frequency level to highspeed_clock when the GPU utilization over highspeed_load and over this delayed value.\n",
		default:$(cat /sys/devices/14ac0000.mali/highspeed_delay),
		max:5, min:0, unit:" ms", step:1,
		action:"generic /sys/devices/14ac0000.mali/highspeed_delay",
	}},
	{ SSpacer:{
		height:1
	}},
	{ SPane:{
		title:"HPM Voltage Control",
	}},
	{ SSeekBar:{
		title:"Mali HPM voltage margin",
		description:"Set the maximum voltage margin the APM undervolts down to.\n",
		default:$(cat /sys/kernel/debug/mailbox/g3d_cl_margin),
		action:"generic /sys/kernel/debug/mailbox/g3d_cl_margin",
		unit:" ÂµV", weight:6250.0, min:0, step:1, max:10
	}},
	{ SSpacer:{
		height:1
	}},
	{ SPane:{ title:"GPU voltage control" }},
`
	while read -r FREQ VOLT; do
		echo '{ SSeekBar:{'
			echo 'title:"'"$FREQ"' MHz", default:'"$VOLT"', '
			echo 'action:"gpuvolt '"${FREQ}"'", unit:" mV", weight:0.001, min:500000, max:1000000, step:6250 }}, '
	done < /sys/devices/14ac0000.mali/volt_table
`
	{ SSpacer:{
		height:1
	}},
    ]
}
CTAG
